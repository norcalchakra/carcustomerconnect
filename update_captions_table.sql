-- Update captions table to support social media integration
-- This script adds columns for tracking social media posts

-- Check if columns already exist before adding them
DO $$
BEGIN
    -- Add image_urls column if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_name = 'captions' AND column_name = 'image_urls') THEN
        ALTER TABLE captions ADD COLUMN image_urls TEXT[] DEFAULT '{}';
    END IF;

    -- Add Facebook-related columns if they don't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_name = 'captions' AND column_name = 'posted_to_facebook') THEN
        ALTER TABLE captions ADD COLUMN posted_to_facebook BOOLEAN DEFAULT FALSE;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_name = 'captions' AND column_name = 'facebook_post_id') THEN
        ALTER TABLE captions ADD COLUMN facebook_post_id TEXT;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_name = 'captions' AND column_name = 'facebook_posted_at') THEN
        ALTER TABLE captions ADD COLUMN facebook_posted_at TIMESTAMPTZ;
    END IF;

    -- Add Instagram-related columns if they don't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_name = 'captions' AND column_name = 'posted_to_instagram') THEN
        ALTER TABLE captions ADD COLUMN posted_to_instagram BOOLEAN DEFAULT FALSE;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_name = 'captions' AND column_name = 'instagram_post_id') THEN
        ALTER TABLE captions ADD COLUMN instagram_post_id TEXT;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_name = 'captions' AND column_name = 'instagram_posted_at') THEN
        ALTER TABLE captions ADD COLUMN instagram_posted_at TIMESTAMPTZ;
    END IF;
END $$;

-- Create user_social_accounts table if it doesn't exist
CREATE TABLE IF NOT EXISTS user_social_accounts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    platform TEXT NOT NULL,
    platform_id TEXT NOT NULL,
    platform_name TEXT NOT NULL,
    access_token TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, platform, platform_id)
);

-- Add RLS policies for user_social_accounts table
ALTER TABLE user_social_accounts ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own social accounts" ON user_social_accounts;
DROP POLICY IF EXISTS "Users can insert their own social accounts" ON user_social_accounts;
DROP POLICY IF EXISTS "Users can update their own social accounts" ON user_social_accounts;
DROP POLICY IF EXISTS "Users can delete their own social accounts" ON user_social_accounts;

-- Create policies
CREATE POLICY "Users can view their own social accounts" 
ON user_social_accounts FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own social accounts" 
ON user_social_accounts FOR INSERT 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own social accounts" 
ON user_social_accounts FOR UPDATE 
USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own social accounts" 
ON user_social_accounts FOR DELETE 
USING (auth.uid() = user_id);

-- Add index for faster lookups
CREATE INDEX IF NOT EXISTS idx_user_social_accounts_user_id ON user_social_accounts(user_id);
CREATE INDEX IF NOT EXISTS idx_user_social_accounts_platform ON user_social_accounts(platform);

-- Output success message
SELECT 'Captions table and user_social_accounts table updated successfully for social media integration' as message;
