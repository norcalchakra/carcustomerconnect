import { supabase, fetchFromSupabase } from './supabase';
import type { Database } from '../types/database.types';

// Type definitions
export type Vehicle = Database['public']['Tables']['vehicles']['Row'];
export type VehicleInsert = Database['public']['Tables']['vehicles']['Insert'];
export type VehicleUpdate = Database['public']['Tables']['vehicles']['Update'];

export type VehicleEvent = Database['public']['Tables']['vehicle_events']['Row'];
export type VehicleEventInsert = Database['public']['Tables']['vehicle_events']['Insert'];

export type VehiclePhoto = Database['public']['Tables']['vehicle_photos']['Row'];
export type VehiclePhotoInsert = Database['public']['Tables']['vehicle_photos']['Insert'];

export type Dealership = Database['public']['Tables']['dealerships']['Row'];

// Vehicle API
export const vehiclesApi = {
  // Get all vehicles for a dealership
  getAll: async (dealershipId: number) => {
    const { data, error } = await supabase
      .from('vehicles')
      .select('*')
      .eq('dealership_id', dealershipId)
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data as Vehicle[];
  },

  // Get a single vehicle by ID
  getById: async (id: number) => {
    const { data, error } = await supabase
      .from('vehicles')
      .select('*')
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as Vehicle;
  },

  // Create a new vehicle
  create: async (vehicle: VehicleInsert) => {
    console.log('Creating vehicle with data:', vehicle);
    
    try {
      // First, get the current user
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error('Error getting current user:', userError);
        throw userError;
      }
      
      if (!user) {
        console.error('No user found');
        throw new Error('No user found');
      }
      
      console.log('Current user:', user);
      
      // Get the dealership for the current user
      const { data: dealerships, error: dealershipError } = await supabase
        .from('dealerships')
        .select('*')
        .eq('user_id', user.id);
      
      if (dealershipError) {
        console.error('Error getting dealership:', dealershipError);
        throw dealershipError;
      }
      
      if (!dealerships || dealerships.length === 0) {
        console.error('No dealership found for user');
        throw new Error('No dealership found for user');
      }
      
      console.log('User dealerships:', dealerships);
      
      // Use the first dealership found
      const dealership = dealerships[0];
      console.log('Using dealership:', dealership);
      
      // Insert the vehicle with the dealership ID
      const { data, error } = await supabase
        .from('vehicles')
        .insert({ ...vehicle, dealership_id: vehicle.dealership_id || dealership.id })
        .select()
        .single();
      
      if (error) {
        console.error('Error inserting vehicle:', error);
        throw error;
      }
      
      console.log('Vehicle created successfully:', data);
      return data as Vehicle;
    } catch (err) {
      console.error('Error in create vehicle:', err);
      throw err;
    }
  },

  // Update a vehicle
  update: async (id: number, vehicle: VehicleUpdate) => {
    const { data, error } = await supabase
      .from('vehicles')
      .update(vehicle)
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Vehicle;
  },

  // Delete a vehicle
  delete: async (id: number) => {
    const { error } = await supabase
      .from('vehicles')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
    return true;
  },

  // Get vehicles by status
  getByStatus: async (dealershipId: number, status: Vehicle['status']) => {
    const { data, error } = await supabase
      .from('vehicles')
      .select('*')
      .eq('dealership_id', dealershipId)
      .eq('status', status)
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data as Vehicle[];
  },

  // Count vehicles by status
  countByStatus: async (dealershipId: number) => {
    // Get all vehicles for the dealership
    const { data, error } = await supabase
      .from('vehicles')
      .select('status')
      .eq('dealership_id', dealershipId);
    
    if (error) throw error;
    
    // Count vehicles by status
    const counts = {
      inventory: 0,
      sold: 0,
      service: 0,
      pending: 0
    };
    
    data.forEach((vehicle: Vehicle) => {
      counts[vehicle.status]++;
    });
    
    return counts;
  }
};

// Vehicle Events API
export const eventsApi = {
  // Get all events for a vehicle
  getForVehicle: async (vehicleId: number) => {
    const { data, error } = await supabase
      .from('vehicle_events')
      .select('*')
      .eq('vehicle_id', vehicleId)
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data as VehicleEvent[];
  },

  // Create a new event
  create: async (event: VehicleEventInsert) => {
    const { data, error } = await supabase
      .from('vehicle_events')
      .insert(event)
      .select()
      .single();
    
    if (error) throw error;
    return data as VehicleEvent;
  }
};

// Vehicle Photos API
export const photosApi = {
  // Get all photos for a vehicle
  getForVehicle: async (vehicleId: number) => {
    const { data, error } = await supabase
      .from('vehicle_photos')
      .select('*')
      .eq('vehicle_id', vehicleId)
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data as VehiclePhoto[];
  },

  // Upload a photo
  upload: async (vehicleId: number, file: File) => {
    // Generate a unique file name
    const fileExt = file.name.split('.').pop();
    const fileName = `${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
    const filePath = `vehicle-photos/${vehicleId}/${fileName}`;
    
    // Upload the file to storage
    const { error: uploadError } = await supabase.storage
      .from('public')
      .upload(filePath, file);
    
    if (uploadError) {
      console.error('Error uploading file:', uploadError);
      throw uploadError;
    }
    
    // Get the public URL for the file
    const { data: { publicUrl } } = supabase.storage
      .from('public')
      .getPublicUrl(filePath);
    
    // Create a record in the vehicle_photos table
    const { data, error } = await supabase
      .from('vehicle_photos')
      .insert({
        vehicle_id: vehicleId,
        url: publicUrl,
        file_path: filePath,
        file_name: fileName,
        file_type: file.type,
        file_size: file.size
      })
      .select()
      .single();
    
    if (error) {
      console.error('Error creating photo record:', error);
      
      // Try to delete the uploaded file if the record creation failed
      await supabase.storage
        .from('public')
        .remove([filePath]);
      
      throw error;
    }
    
    return data as VehiclePhoto;
  },

  // Delete a photo
  delete: async (id: number) => {
    // First, get the photo record to get the file path
    const { data: photo, error: getError } = await supabase
      .from('vehicle_photos')
      .select('file_path')
      .eq('id', id)
      .single();
    
    if (getError) {
      console.error('Error getting photo record:', getError);
      throw getError;
    }
    
    // Delete the file from storage
    if (photo && photo.file_path) {
      const { error: deleteFileError } = await supabase.storage
        .from('public')
        .remove([photo.file_path]);
      
      if (deleteFileError) {
        console.error('Error deleting file from storage:', deleteFileError);
        // Continue anyway to delete the record
      }
    }
    
    // Delete the record from the database
    const { error } = await supabase
      .from('vehicle_photos')
      .delete()
      .eq('id', id);
    
    if (error) {
      console.error('Error deleting photo record:', error);
      throw error;
    }
    
    return true;
  }
};

// Authentication API
export const authApi = {
  // Sign up a new user
  signUp: async (email: string, password: string) => {
    // Create the user in Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
    });
    
    if (authError) throw authError;
    
    // If the sign-up was successful, create a default dealership for the user
    if (authData.user) {
      try {
        // Create a default dealership
        const { data: dealershipData, error: dealershipError } = await supabase
          .from('dealerships')
          .insert({
            name: 'Default Dealership',
            user_id: authData.user.id,
            address: '',
            city: '',
            state: '',
            zip: '',
            phone: '',
            email: email,
            website: '',
            logo_url: ''
          })
          .select()
          .single();
        
        if (dealershipError) {
          console.error('Error creating default dealership:', dealershipError);
          // Continue anyway, as the user was created
        }
        
        return {
          user: authData.user,
          dealership: dealershipData
        };
      } catch (err) {
        console.error('Error in sign-up process:', err);
        // Return the user anyway
        return {
          user: authData.user,
          dealership: null
        };
      }
    }
    
    return { user: null, dealership: null };
  },

  // Sign in a user
  signIn: async (email: string, password: string) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    
    if (error) throw error;
    return data;
  },

  // Sign out
  signOut: async () => {
    const { error } = await supabase.auth.signOut();
    
    if (error) throw error;
    return true;
  },

  // Get the current user
  getCurrentUser: async () => {
    const { data, error } = await supabase.auth.getUser();
    
    if (error) throw error;
    return data.user;
  }
};

// Dealership API
export const dealershipApi = {
  // Get a dealership by user ID
  getByUserId: async (userId: string) => {
    try {
      console.log('Getting dealership for user ID:', userId);
      
      // First, check if the user exists
      const { data: userData, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error('Error getting current user:', userError);
        throw userError;
      }
      
      if (!userData || !userData.user) {
        console.error('No user found');
        throw new Error('No user found');
      }
      
      console.log('Current user:', userData.user);
      
      // Get the dealership for the user
      const { data, error } = await supabase
        .from('dealerships')
        .select('*')
        .eq('user_id', userId)
        .single();
      
      if (error) {
        console.error('Error getting dealership:', error);
        
        // If no dealership found, create a default one
        if (error.code === 'PGRST116') {
          console.log('No dealership found, creating default dealership');
          
          // Create a default dealership
          const { data: newDealership, error: createError } = await supabase
            .from('dealerships')
            .insert({
              name: 'Default Dealership',
              user_id: userId,
              address: '',
              city: '',
              state: '',
              zip: '',
              phone: '',
              email: userData.user.email || '',
              website: '',
              logo_url: ''
            })
            .select()
            .single();
          
          if (createError) {
            console.error('Error creating default dealership:', createError);
            throw createError;
          }
          
          console.log('Default dealership created:', newDealership);
          return newDealership as Dealership;
        }
        
        throw error;
      }
      
      console.log('Dealership found:', data);
      return data as Dealership;
    } catch (err) {
      console.error('Error in getByUserId:', err);
      throw err;
    }
  },

  // Create a new dealership
  create: async (dealership: Omit<Database['public']['Tables']['dealerships']['Insert'], 'id' | 'created_at'>) => {
    const { data, error } = await supabase
      .from('dealerships')
      .insert(dealership)
      .select()
      .single();
    
    if (error) throw error;
    return data as Dealership;
  },

  // Update a dealership
  update: async (id: number, dealership: Partial<Omit<Database['public']['Tables']['dealerships']['Update'], 'id' | 'created_at'>>) => {
    const { data, error } = await supabase
      .from('dealerships')
      .update(dealership)
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Dealership;
  }
};

// Social Media Caption API
export type Caption = {
  id?: number;
  vehicle_id: number;
  event_id: number;
  content: string;
  hashtags: string[];
  created_at?: string;
};

export type CaptionInsert = Omit<Caption, 'id' | 'created_at'>;

export const captionApi = {
  // Get all captions for a vehicle
  getForVehicle: async (vehicleId: number) => {
    const { data, error } = await supabase
      .from('captions')
      .select('*')
      .eq('vehicle_id', vehicleId)
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data as Caption[];
  },

  // Get caption by event ID
  getByEventId: async (eventId: number) => {
    try {
      console.log('Fetching caption for event ID:', eventId);
      
      const { data, error } = await supabase
        .from('captions')
        .select('*')
        .eq('event_id', eventId);
      
      if (error) {
        console.error('Error fetching caption by event ID:', error);
        throw error;
      }
      
      // Return the first caption if found, or null if none found
      return (data && data.length > 0) ? data[0] as Caption : null;
    } catch (err) {
      console.error('Error in getByEventId:', err);
      return null; // Return null instead of throwing to prevent UI errors
    }
  },

  // Create a new caption
  create: async (caption: CaptionInsert) => {
    const { data, error } = await supabase
      .from('captions')
      .insert(caption)
      .select()
      .single();
    
    if (error) throw error;
    return data as Caption;
  },

  // Update a caption
  update: async (id: number, caption: Partial<Omit<Caption, 'id' | 'created_at'>>) => {
    const { data, error } = await supabase
      .from('captions')
      .update(caption)
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Caption;
  },

  // Delete a caption
  delete: async (id: number) => {
    const { error } = await supabase
      .from('captions')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
    return true;
  }
};
