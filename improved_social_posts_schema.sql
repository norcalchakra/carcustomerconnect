-- Drop existing table if needed (comment this out if you want to preserve existing data)
-- DROP TABLE IF EXISTS social_posts;

-- Create improved social_posts table
CREATE TABLE IF NOT EXISTS social_posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  vehicle_id BIGINT REFERENCES vehicles(id),
  dealership_id BIGINT REFERENCES dealerships(id) NOT NULL,
  content TEXT NOT NULL,
  content_summary VARCHAR(150), -- Short summary for dashboard display
  platform VARCHAR(50) NOT NULL, -- 'facebook', 'instagram', 'google'
  post_id VARCHAR(255), -- ID returned from the social media platform
  post_url VARCHAR(500), -- Direct URL to the post on the platform
  image_urls TEXT[], -- Array of image URLs used in the post
  status VARCHAR(50) DEFAULT 'posted', -- 'posted', 'scheduled', 'failed'
  scheduled_for TIMESTAMP WITH TIME ZONE, -- NULL for immediate posts
  engagement JSONB DEFAULT '{}'::jsonb, -- Likes, comments, shares counts
  metadata JSONB -- Additional platform-specific data
);

-- Add indexes for common queries
CREATE INDEX IF NOT EXISTS social_posts_vehicle_id_idx ON social_posts(vehicle_id);
CREATE INDEX IF NOT EXISTS social_posts_dealership_id_idx ON social_posts(dealership_id);
CREATE INDEX IF NOT EXISTS social_posts_created_at_idx ON social_posts(created_at);
CREATE INDEX IF NOT EXISTS social_posts_platform_idx ON social_posts(platform);
CREATE INDEX IF NOT EXISTS social_posts_status_idx ON social_posts(status);

-- Add RLS policies
ALTER TABLE social_posts ENABLE ROW LEVEL SECURITY;

-- Policy to allow users to view posts from their dealership
CREATE POLICY social_posts_select_policy ON social_posts
  FOR SELECT USING (
    dealership_id IN (
      SELECT id FROM dealerships WHERE user_id = auth.uid()
    )
  );

-- Policy to allow users to insert posts for their dealership
CREATE POLICY social_posts_insert_policy ON social_posts
  FOR INSERT WITH CHECK (
    dealership_id IN (
      SELECT id FROM dealerships WHERE user_id = auth.uid()
    )
  );

-- Policy to allow users to update posts from their dealership
CREATE POLICY social_posts_update_policy ON social_posts
  FOR UPDATE USING (
    dealership_id IN (
      SELECT id FROM dealerships WHERE user_id = auth.uid()
    )
  );

-- Policy to allow users to delete posts from their dealership
CREATE POLICY social_posts_delete_policy ON social_posts
  FOR DELETE USING (
    dealership_id IN (
      SELECT id FROM dealerships WHERE user_id = auth.uid()
    )
  );

-- Function to automatically generate content_summary from content
CREATE OR REPLACE FUNCTION generate_content_summary() 
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.content IS NOT NULL THEN
    -- Take first 147 characters and add ellipsis if needed
    IF length(NEW.content) > 147 THEN
      NEW.content_summary = substring(NEW.content, 1, 147) || '...';
    ELSE
      NEW.content_summary = NEW.content;
    END IF;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to set content_summary before insert or update
CREATE TRIGGER set_content_summary
  BEFORE INSERT OR UPDATE ON social_posts
  FOR EACH ROW
  EXECUTE FUNCTION generate_content_summary();

-- Create view for dashboard activity that includes abbreviated content
CREATE OR REPLACE VIEW dashboard_activity AS
SELECT 
  'social_post' as activity_type,
  sp.id,
  sp.created_at,
  sp.vehicle_id,
  sp.dealership_id,
  sp.content_summary,
  sp.platform,
  sp.status,
  v.year,
  v.make,
  v.model,
  v.vin,
  v.stock_number
FROM 
  social_posts sp
JOIN 
  vehicles v ON sp.vehicle_id = v.id
UNION ALL
SELECT
  ve.event_type as activity_type,
  ve.id,
  ve.created_at,
  ve.vehicle_id,
  v.dealership_id,
  ve.notes as content_summary,
  NULL as platform,
  NULL as status,
  v.year,
  v.make,
  v.model,
  v.vin,
  v.stock_number
FROM
  vehicle_events ve
JOIN
  vehicles v ON ve.vehicle_id = v.id
WHERE
  ve.event_type != 'social_post';
